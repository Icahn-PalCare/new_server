= V4 Outline MultiLine NoSorting TabWidth=30

H="First Heading"
/* 
********************HEADING******************** 

Project Name: CAncer Caregivers
Date Started: 7/15/20

Primary Investigator: Naomi
Funding Source:

Created by: MH

Primary Analyst: 
Secondary Analyst:

Datasets Used:

Simple Outline:


*/
 
//STATA
// Global Macros use $ symbol to be called. 

//Intermediate Data Path
global intpath "E:\nhats\data\Projects\..."

// Final Data Path
global datapath "E:\nhats\data\Projects\..."

//Log files path
global logpath "E:\nhats\data\Projects\..."


//SAS 


//Intermediate Data Path
//libname intpath "E:\nhats\data\Projects\..."

// Final Data Path
//libname datapath "E:\nhats\data\Projects\..."

//Log files path
//libname logpath "E:\nhats\data\Projects\..."


H="set libraries"
/*nhats cleaned path*/
libname nhats 'D:\NHATS\Shared\base_data\NHATS cleaned';

/*medicare xwalk and claims path*/
libname medi 'D:\NHATS\Shared\base_data\CMS_claims\Sas';

/*project data paths*/
libname proj_int 'D:\NHATS\Projects\exploratory\cancer_caregivers_naomi\data\int_data';
libname proj_fin 'D:\NHATS\Projects\exploratory\cancer_caregivers_naomi\data\final_data';

H="Index date"
/*Import NHATS Cleaned Dataset for Rounds 1-9*/
proc import datafile="D:\NHATS\Shared\base_data\NHATS cleaned\sp_round_1_9.dta" out=proj_int.nhats replace; run;
proc import datafile="D:\NHATS\Shared\base_data\NHATS cleaned\nsoc_round_1_7.dta" out=proj_int.nsoc replace; run;


proc import datafile="D:\NHATS\Shared\base_data\CMS_claims\Stata\xwalk_2016.dta" out=proj_int.xwalk replace; run;

data index1;
set proj_int.nsoc (keep=spid opid cg_ivw_date);
index_date=cg_ivw_date;
index_month=month(cg_ivw_date);
index_year=year(cg_ivw_date);
run;

proc sql;
create table index as select a.*, b.*
from index1 a left join
proj_int.xwalk b 
on a.spid=b.spid;
quit;


proc sort data=index out=proj_int.index nodupkey;
by spid bene_id index_year opid;
run;

H="get continuous FFS before index date"

/*sort claims denominator file*/

proc sort data=medi.mbsf_06_17 out=mbsf  nodupkey;
by bene_id year;
run;

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year opid;
run;

/*get mbsf just for interview year*/

proc sql; 
create table mbsf_index_year as select
a.*,b.buyin12,b.year,b.hmoind12
from index1 a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id)) 
and a.index_year=b.year;
quit;


proc sql;
select count(distinct bene_id) from mbsf_index_year;
quit;



data mbsf_index_year2;
set mbsf_index_year;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_iy=substr(trim(left(buyin12)),1,index_month);
hmo_iy=substr(trim(left(HMOIND12)),1,index_month);
end;
else do;
buyin_iy=trim(left(buyin12));
hmo_iy=trim(left(HMOIND12));
end;
format index_date date9.;
run;
proc means n;
var index_month;
run;

proc sql;
create table mbsf_index_year_bef as select
a.bene_id,a.year as index_year,
b.year as index_year_bef,
b.year, b.buyin12,b.HMOIND12
from mbsf_index_year a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.year-b.year<=1 order by bene_id,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table mbsf_index_year_2bef as select
a.bene_id,a.bene_id,a.index_year,a.index_year_bef,
b.year as index_year_2bef,
b.year,b.buyin12,b.HMOIND12
from mbsf_index_year_bef a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.index_year_bef-b.year<=1 order by bene_id,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
mbsf_index_year2 a
left join
mbsf_index_year_bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sql;
create table all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
all_insurance a
left join
mbsf_index_year_2bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year; 
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data all_insurance3;
set all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_iy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_iy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r)-1;
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r)-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;


data proj_int.ffs_before;
set all_insurance3;
run;


H="get claims before index date"
/*Get claims 1 year and 2 year before each interview*/
/*Step 2: pull claims lists using xwalk and ivw date*/

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id opid index_year;
run;

/****************************************************************************/
/* Macro to pull claims lists, saves lists to int_data folder               */
/****************************************************************************/
%macro claims_pre(days_start=,days_bef_index=,yrs=,source=);

proc sql;
create table &source._meet_&days_bef_index. as select a.index_date,a.index_year,a.opid,b.*
from proj_int.index a inner join
medi.&source._&yrs. b 
on trim(left(a.bene_id))=trim(left(b.bene_id))
and &days_start<=a.index_date-b.disch_date<=&days_bef_index;
quit;

%mend;

/*run to get claims list 6 mo pre-ivw for ip*/
%claims_pre(days_start=0,days_bef_index=183,yrs=06_17,source=ip);

/*1yr*/
%claims_pre(days_start=0,days_bef_index=365,yrs=06_17,source=ip);
%claims_pre(days_start=0,days_bef_index=365,yrs=09_17,source=snf);
%claims_pre(days_start=0,days_bef_index=365,yrs=09_17,source=op);
%claims_pre(days_start=0,days_bef_index=365,yrs=09_17,source=pb);
%claims_pre(days_start=0,days_bef_index=365,yrs=09_17,source=hh);
%claims_pre(days_start=0,days_bef_index=365,yrs=09_17,source=hs);
%claims_pre(days_start=0,days_bef_index=365,yrs=09_17,source=dm);

/*2yrs*/
%claims_pre(days_start=0,days_bef_index=730,yrs=06_17,source=ip);
%claims_pre(days_start=0,days_bef_index=730,yrs=09_17,source=snf);
%claims_pre(days_start=0,days_bef_index=730,yrs=09_17,source=op);
%claims_pre(days_start=0,days_bef_index=730,yrs=09_17,source=pb);
%claims_pre(days_start=0,days_bef_index=730,yrs=09_17,source=hh);
%claims_pre(days_start=0,days_bef_index=730,yrs=09_17,source=hs);
%claims_pre(days_start=0,days_bef_index=730,yrs=09_17,source=dm);

%macro ip_drop(days_bef_index=);
data proj_int.ip_meet_&days_bef_index.;
set ip_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 icarecnt crnrydaycnt erdaycnt clm_ip_admsn_type_cd
  PRCDR_DT1-PRCDR_DT25 hcpcscd1-hcpcscd49);
run;
%mend ip_drop;

%macro snf_drop(days_bef_index=);
data proj_int.snf_meet_&days_bef_index.;
set snf_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 
 PRCDR_DT1-PRCDR_DT25 );
run;
%mend snf_drop;


/*hh*/
%macro hh_drop(days_bef_index=);
data proj_int.hh_meet_&days_bef_index.;
set hh_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
run;
%mend hh_drop;

/*hs*/
%macro hs_drop(days_bef_index=);
data proj_int.hs_meet_&days_bef_index.;
set hs_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25);
run;
%mend hs_drop;

/*dme*/
%macro dm_drop(days_bef_index=);
data proj_int.dm_meet_&days_bef_index.;
set dm_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date 
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 h_o2);
run;
%mend dm_drop;

/*op*/
%macro op_drop(days_bef_index=);
data proj_int.op_meet_&days_bef_index.;
set op_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 erdaycnt obs_stay);
run;
%mend op_drop;

/*carrier*/
%macro pb_drop(days_bef_index=);
data proj_int.pb_meet_&days_bef_index.;
set pb_meet_&days_bef_index.(keep=bene_id opid index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 hcpcscd1-hcpcscd13);
run;
%mend pb_drop;

%ip_drop(days_bef_index=183);
%ip_drop(days_bef_index=365);
%ip_drop(days_bef_index=730);
%snf_drop(days_bef_index=365);
%snf_drop(days_bef_index=730);
%hh_drop(days_bef_index=365);
%hh_drop(days_bef_index=730);
%hs_drop(days_bef_index=365);
%hs_drop(days_bef_index=730);
%dm_drop(days_bef_index=365);
%dm_drop(days_bef_index=730);
%op_drop(days_bef_index=365);
%op_drop(days_bef_index=730);
%pb_drop(days_bef_index=365);
%pb_drop(days_bef_index=730);



/****************************************************************************/
/****************************************************************************/
/* Macro to pull dx from claims lists, saves dx lists to int_data folder    */
/****************************************************************************/

%macro dx_time_range(range1=, range2=, days_bef_core=);

/*Process carrier medicare claims to pull out dx codes
Multiple lines per each BID*/
data pb_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.pb_meet_&days_bef_core.(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 hcpcscd1-hcpcscd13);
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12;
do over dx;
diag=dx ;
output;
end;
run;
/*check for and remove duplicates, note this doesn't remove blanks*/
proc sort data=pb_last_&range2._dx out=pb_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;


/*Process outpatient medicare claims to pull out dx codes
Dataset being created: op_last_&range2._dx2*/
data op_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.op_meet_&days_bef_core.(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25  );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=op_last_&range2._dx out=op_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;

proc contents data=proj_int.ip_meet_365; run;


/*Dataset being created: ip_last_&range2._dx2*/
data ip_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.ip_meet_&days_bef_core.(keep=bene_id opid index_year ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 hcpcscd1-hcpcscd49);
array dx ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=ip_last_&range2._dx out=ip_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;

/*Dataset being created: snf_last_&range2._dx2*/
data snf_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.snf_meet_&days_bef_core.(keep=bene_id opid index_year ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=snf_last_&range2._dx out=snf_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;

/*Process dme medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data dm_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.dm_meet_&days_bef_core.(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=dm_last_&range2._dx out=dm_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;

/*Process hh medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data hh_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.hh_meet_&days_bef_core.(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hh_last_&range2._dx out=hh_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;

/*Process hs medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data hs_last_&range2._dx(keep=bene_id opid index_year diag);
set proj_int.hs_meet_&days_bef_core.(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hs_last_&range2._dx out=hs_last_&range2._dx2 nodupkey;
by bene_id opid index_year diag;
run;


/*set diag variable length = 7 chars since that's the max length from the mc claims
Need to do this because length varies across the different mc claim types*/
data hs_last_&range2._dx3;
length diag $7;
set hs_last_&range2._dx2;
run;
data hh_last_&range2._dx3;
length diag $7;
set hh_last_&range2._dx2;
run;
data ip_last_&range2._dx3;
length diag $7;
set ip_last_&range2._dx2;
run;
data snf_last_&range2._dx3;
length diag $7;
set snf_last_&range2._dx2;
run;
data dm_last_&range2._dx3;
length diag $7;
set dm_last_&range2._dx2;
run;
data op_last_&range2._dx3;
length diag $7;
set op_last_&range2._dx2;
run;
data pb_last_&range2._dx3;
length diag $7;
set pb_last_&range2._dx2;
run;


/*merge diagnoses from each claim type into single dataset*/
data dx_all_last_1&range2.;
set hs_last_&range2._dx3
hh_last_&range2._dx3
ip_last_&range2._dx3
snf_last_&range2._dx3
dm_last_&range2._dx3
op_last_&range2._dx3
pb_last_&range2._dx3;
run;

proc sql;
create table dx_all_last_&range2. as select * from
proj_int.index a 
left join 
dx_all_last_1&range2. b
on a.bene_id=b.bene_id and a.index_year=b.index_year;
quit; 

proc sort data=dx_all_last_&range2.(where=(diag~="")) out=proj_int.dx_&range1._&range2 nodupkey;
by bene_id index_year diag;
run;


%mend;

/*1 and 2 years pre-interview: proj_int.dx_0_1yr, proj_int.dx_0_2yr */
%dx_time_range(range1=0, range2=1yr, days_bef_core=365);
%dx_time_range(range1=0, range2=2yr, days_bef_core=730);



data dx_all_last_1yr_w_dups;
set hs_last_1yr_dx
hh_last_1yr_dx
ip_last_1yr_dx
snf_last_1yr_dx
dm_last_1yr_dx
op_last_1yr_dx
pb_last_1yr_dx;
if diag~='.';
run;

proc sort data=dx_all_last_1yr_w_dups;
by bene_id opid index_year diag;
run;

/*****************************************/
/*check dementia diagnosis frequencies, need to pull this into main dataset
dx list is from Elixhauser code*/
data proj_int.dem_dx_freq;
set dx_all_last_1yr_w_dups;
	dementia=0;
	dem_icd10=0;
	if (substr(diag,1,4) in ('3310','3311','3312','2900','2901',
             '2902','2903','2912','2948','2949') or
		substr(diag,1,5) in ('29410','29411','29040','29041','29042','29043'))
		and dementia=0 
          then dementia=1;
/*ICD-10*/		

if (substr(diag,1,5)='F0150'
or substr(diag,1,5)='F0151'
or substr(diag,1,5)='F0280'
or substr(diag,1,5)='F0281'
or substr(diag,1,5)='F0390'
or substr(diag,1,5)='F0391'
or substr(diag,1,4)='F051'
or substr(diag,1,5)='F1027'
or substr(diag,1,5)='F1097'
or substr(diag,1,4)='G300'
or substr(diag,1,4)='G301'
or substr(diag,1,4)='G308'
or substr(diag,1,4)='G309'
or substr(diag,1,5)='G3101'
or substr(diag,1,5)='G3109'
or substr(diag,1,4)='G311'
or substr(diag,1,5)='G3183'
or substr(diag,1,4)='A811'
or substr(diag,1,4)='A812'
or substr(diag,1,4)='A818'
or substr(diag,1,5)='A8100'
or substr(diag,1,5)='A8101'
or substr(diag,1,5)='A8109'
or substr(diag,1,5)='A8181'
or substr(diag,1,5)='A8182'
or substr(diag,1,5)='A8183'
) 
		and dem_icd10=0 
          then dem_icd10=1;
if dem_icd10=1 then dementia=1;
run;



H="get claims after index date"
/*Get claims 1 year and 2 year before each interview*/
/*Step 2: pull claims lists using xwalk and ivw date*/

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id opid index_year;
run;

/****************************************************************************/
/* Macro to pull claims lists, saves lists to int_data folder               */
/****************************************************************************/
%macro claims_post(days_start=,days_aft_index=,yrs=,source=);

proc sql;
create table &source._meet_&days_aft_index.p as select a.*,b.index_date,b.index_year,b.opid
from medi.&source._&yrs. a inner join
proj_int.index b 
on trim(left(a.bene_id))=trim(left(b.bene_id))
and &days_start<=a.admit_date-b.index_date<=&days_aft_index;
quit;

%mend;

/*run to get claims list 6 mo pre-ivw for ip*/
%claims_post(days_start=0,days_aft_index=183,yrs=06_17,source=ip);

/*6m*/
%claims_post(days_start=0,days_aft_index=183,yrs=06_17,source=ip);
%claims_post(days_start=0,days_aft_index=183,yrs=09_17,source=snf);
%claims_post(days_start=0,days_aft_index=183,yrs=09_17,source=op);
%claims_post(days_start=0,days_aft_index=183,yrs=09_17,source=pb);
%claims_post(days_start=0,days_aft_index=183,yrs=09_17,source=hh);
%claims_post(days_start=0,days_aft_index=183,yrs=09_17,source=hs);
%claims_post(days_start=0,days_aft_index=183,yrs=09_17,source=dm);

/*1yr*/
%claims_post(days_start=0,days_aft_index=365,yrs=06_17,source=ip);
%claims_post(days_start=0,days_aft_index=365,yrs=09_17,source=snf);
%claims_post(days_start=0,days_aft_index=365,yrs=09_17,source=op);
%claims_post(days_start=0,days_aft_index=365,yrs=09_17,source=pb);
%claims_post(days_start=0,days_aft_index=365,yrs=09_17,source=hh);
%claims_post(days_start=0,days_aft_index=365,yrs=09_17,source=hs);
%claims_post(days_start=0,days_aft_index=365,yrs=09_17,source=dm);

/*2yrs*/
%claims_post(days_start=0,days_aft_index=730,yrs=06_17,source=ip);
%claims_post(days_start=0,days_aft_index=730,yrs=09_17,source=snf);
%claims_post(days_start=0,days_aft_index=730,yrs=09_17,source=op);
%claims_post(days_start=0,days_aft_index=730,yrs=09_17,source=pb);
%claims_post(days_start=0,days_aft_index=730,yrs=09_17,source=hh);
%claims_post(days_start=0,days_aft_index=730,yrs=09_17,source=hs);
%claims_post(days_start=0,days_aft_index=730,yrs=09_17,source=dm);

%macro ip_drop(days_aft_index=);
data proj_int.ip_meet_&days_aft_index.p;
set ip_meet_&days_aft_index.p(keep=clm_pmt_amt clm_pass_thru_per_diem_amt bene_id opid index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 crnrydaycnt icarecnt erdaycnt clm_ip_admsn_type_cd
  PRCDR_DT1-PRCDR_DT25 PRNCPAL_DGNS_CD hcpcscd1-hcpcscd49);
run;
%mend ip_drop;

%macro snf_drop(days_aft_index=);
data proj_int.snf_meet_&days_aft_index.p;
set snf_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id opid index_year index_date admit_date disch_date 
  ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ICD_PRCDR_CD1-ICD_PRCDR_CD25 
 PRCDR_DT1-PRCDR_DT25 PRNCPAL_DGNS_CD);
run;
%mend snf_drop;


/*hh*/
%macro hh_drop(days_aft_index=);
data proj_int.hh_meet_&days_aft_index.p;
set hh_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id opid index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
run;
%mend hh_drop;

/*hs*/
%macro hs_drop(days_aft_index=);
data proj_int.hs_meet_&days_aft_index.p;
set hs_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id opid index_year index_date admit_date PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25);
run;
%mend hs_drop;

/*dme*/
%macro dm_drop(days_aft_index=);
data proj_int.dm_meet_&days_aft_index.p;
set dm_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id opid index_year index_date admit_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 );
run;
%mend dm_drop;

/*op*/
%macro op_drop(days_aft_index=);
data proj_int.op_meet_&days_aft_index.p;
set op_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id opid index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 erdaycnt);
run;
%mend op_drop;

/*carrier*/
%macro pb_drop(days_aft_index=);
data proj_int.pb_meet_&days_aft_index.p;
set pb_meet_&days_aft_index.p(keep=clm_pmt_amt bene_id opid index_year index_date admit_date disch_date
PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 hcpcscd1-hcpcscd13);
run;
%mend pb_drop;

%ip_drop(days_aft_index=183);
%ip_drop(days_aft_index=365);
%ip_drop(days_aft_index=730);
%snf_drop(days_aft_index=183);
%snf_drop(days_aft_index=365);
%snf_drop(days_aft_index=730);
%hh_drop(days_aft_index=183);
%hh_drop(days_aft_index=365);
%hh_drop(days_aft_index=730);
%hs_drop(days_aft_index=183);
%hs_drop(days_aft_index=365);
%hs_drop(days_aft_index=730);
%dm_drop(days_aft_index=183);
%dm_drop(days_aft_index=365);
%dm_drop(days_aft_index=730);
%op_drop(days_aft_index=183);
%op_drop(days_aft_index=365);
%op_drop(days_aft_index=730);
%pb_drop(days_aft_index=183);
%pb_drop(days_aft_index=365);
%pb_drop(days_aft_index=730);
 



/****************************************************************************/
/****************************************************************************/
/* Macro to pull dx from claims lists, saves dx lists to int_data folder    */
/****************************************************************************/

%macro dx_time_range(range1=, range2=, days_aft_core=);

/*Process carrier medicare claims to pull out dx codes
Multiple lines per each BID*/
data pb_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.pb_meet_&days_aft_core.p(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 hcpcscd1-hcpcscd13);
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12;
do over dx;
diag=dx ;
output;
end;
run;
/*check for and remove duplicates, note this doesn't remove blanks*/
proc sort data=pb_last_&range2._dx_post out=pb_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;


/*Process outpatient medicare claims to pull out dx codes
Dataset being created: op_last_&range2._dx2*/
data op_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.op_meet_&days_aft_core.p(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25  );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=op_last_&range2._dx_post out=op_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;


/*Dataset being created: ip_last_&range2._dx2*/
data ip_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.ip_meet_&days_aft_core.p(keep=bene_id opid index_year ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 hcpcscd1-hcpcscd49);
array dx ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=ip_last_&range2._dx_post out=ip_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;

/*Dataset being created: snf_last_&range2._dx2*/
data snf_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.snf_meet_&days_aft_core.p(keep=bene_id opid index_year ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx ADMTG_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=snf_last_&range2._dx_post out=snf_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;

/*Process dme medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data dm_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.dm_meet_&days_aft_core.p(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD12 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=dm_last_&range2._dx_post out=dm_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;

/*Process hh medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data hh_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.hh_meet_&days_aft_core.p(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hh_last_&range2._dx_post out=hh_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;

/*Process hs medicare claims to pull out dx codes
Dataset being created: dm_last_&range2._dx2*/
data hs_last_&range2._dx_post(keep=bene_id opid index_year diag);
set proj_int.hs_meet_&days_aft_core.p(keep=bene_id opid index_year PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 );
array dx PRNCPAL_DGNS_CD ICD_DGNS_CD1-ICD_DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hs_last_&range2._dx_post out=hs_last_&range2._dx2_post nodupkey;
by bene_id opid index_year diag;
run;


/*set diag variable length = 7 chars since that's the max length from the mc claims
Need to do this because length varies across the different mc claim types*/
data hs_last_&range2._dx3_post;
length diag $7;
set hs_last_&range2._dx2_post;
run;
data hh_last_&range2._dx3_post;
length diag $7;
set hh_last_&range2._dx2_post;
run;
data ip_last_&range2._dx3_post;
length diag $7;
set ip_last_&range2._dx2_post;
run;
data snf_last_&range2._dx3_post;
length diag $7;
set snf_last_&range2._dx2_post;
run;
data dm_last_&range2._dx3_post;
length diag $7;
set dm_last_&range2._dx2_post;
run;
data op_last_&range2._dx3_post;
length diag $7;
set op_last_&range2._dx2_post;
run;
data pb_last_&range2._dx3_post;
length diag $7;
set pb_last_&range2._dx2_post;
run;


/*merge diagnoses from each claim type into single dataset*/
data dx_all_last_1&range2._post;
set hs_last_&range2._dx3_post
hh_last_&range2._dx3_post
ip_last_&range2._dx3_post
snf_last_&range2._dx3_post
dm_last_&range2._dx3_post
op_last_&range2._dx3_post
pb_last_&range2._dx3_post;
run;

proc sql;
create table dx_all_last_&range2._post as select * from
proj_int.index a 
left join 
dx_all_last_1&range2._post b
on a.bene_id=b.bene_id and a.index_year=b.index_year;
quit; 

proc sort data=dx_all_last_&range2._post(where=(diag~="")) out=proj_int.dx_&range1._&range2._post nodupkey;
by bene_id index_year diag;
run;


%mend;

/*1 and 2 years pre-interview: proj_int.dx_0_1yr, proj_int.dx_0_2yr */
%dx_time_range(range1=0, range2=1yr, days_aft_core=365);
%dx_time_range(range1=0, range2=2yr, days_aft_core=730);


H="get no cancer before and cancer after"
data cancer_dx_1_yr_bef;
set dx_all_last_1yr;
	cancer=0;
	if (substr(diag,1,2) in ('13','14','15','16','17',
             '18','19','20','21','22','23','24')
	or (substr(diag,1,2) in ('C0','C1','C2','C3','C4',
             'C5','C6','C7','C8','C9','D0','D1','D3','D4'))
	and cancer=0)
	then cancer=1;
run;

proc sort data=cancer_dx_1_yr_bef out=cancer_dx_1_yr_bef_s ;
by spid opid index_year cg_ivw_date;
run;

proc sql;
create table cancer_dx_1_yr_bef_tot as 
select distinct spid, opid, index_year, 
sum(cancer) as cancer_ind
from cancer_dx_1_yr_bef_s
group by spid, opid, index_year;
quit;

proc freq data=cancer_dx_1_yr_bef_tot;
tables cancer_ind;
run;

data no_cancer_1yr;
set cancer_dx_1_yr_bef_tot;
if cancer_ind=0 ;
run;

/* now bring in after 1 year */

data cancer_dx_1_yr_aft;
set dx_all_last_1yr_post;
	cancer=0;
	if (substr(diag,1,2) in ('13','14','15','16','17',
             '18','19','20','21','22','23','24')
	or (substr(diag,1,2) in ('C0','C1','C2','C3','C4',
             'C5','C6','C7','C8','C9','D0','D1','D3','D4'))
	and cancer=0)
	then cancer=1;
	if admit_date="." then admit_date=disch_date;
run;

proc sort data=cancer_dx_1_yr_aft out=cancer_dx_1_yr_aft_s ;
by spid opid index_year cg_ivw_date admit_date;
run;

data cancer_dx_1_yr_aft_time;
set cancer_dx_1_yr_aft_s;
num_month=floor((admit_date-cg_ivw_date)/30.4);
if cancer=1;
run;

data cancer_dx_1_yr_aft_first;
set cancer_dx_1_yr_aft_time;
by spid opid index_year;
if first.spid then keep=1;
run;


data cancer_dx_1_yr_aft_tot(keep=spid opid index_year num_month);
set cancer_dx_1_yr_aft_first;
if keep=1;
run;

/*
proc sql;
create table cancer_dx_1_yr_aft_tot as 
select distinct spid, opid, index_year, index_month, 
sum(cancer) as cancer_ind
from cancer_dx_1_yr_aft_s
group by spid, opid, index_year, index_month;
quit;

proc freq data=cancer_dx_1_yr_aft_tot;
tables cancer_ind;
run;

data cancer_1yr_aft;
set cancer_dx_1_yr_aft_tot;
if cancer_ind>0 ;
run;
*/

proc sql;
create table cancer as select a.spid, a.opid, a.index_year, b.*
from no_cancer_1yr a
inner join
cancer_dx_1_yr_aft_tot b
on a.spid=b.spid and a.index_year=b.index_year and a.opid=b.opid;
quit;

data proj_fin.cancer ;
set cancer;
run;




H="Change log"


********************Change Log******************** 



Updates:

07/21/2020 MH
------------
Created no cancer before, cancer after nsoc index date. 

07/15/2020 MH
------------
Creation of dataset. 


*/