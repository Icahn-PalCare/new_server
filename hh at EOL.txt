= V4 Outline MultiLine NoSorting TabWidth=30

H="First Heading"
/* 
********************HEADING******************** 

Project Name: Home health use at the end of life	

Date Started: Feb 1 2020

Primary Investigator: Claire Ankuda
Funding Source: NPCRC

Created by: Claire Ankuda

Primary Analyst: cka
Secondary Analyst:

Datasets Used: Beeson

Simple Outline:


*/
 
//STATA
// Global Macros use $ symbol to be called. 

//Intermediate Data Path
global intpath "E:\nhats\data\Projects\..."

// Final Data Path
global datapath "E:\nhats\data\Projects\..."

//Log files path
global logpath "E:\nhats\data\Projects\..."


global int "D:\NHATS\Projects\home health policy\cka_hh at eol\data\"
global final "D:\NHATS\Projects\home health policy\cka_hh at eol\data\"
global output "D:\NHATS\Projects\home health policy\cka_hh at eol\output\"
global logs "D:\NHATS\Projects\home health policy\cka_hh at eol\output\"




//SAS 
/*SAS */


/*nhats cleaned path*/

libname nhats 'D:\nhats\shared\base_data\nhats cleaned';

/*medicare xwalk and claims path*/
libname medi 'D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Merged\SAS';

/*project data paths*/
libname proj_int 'D:\nhats\projects\home health policy\cka_hh at EOL\data';
libname proj_fin "D:\nhats\projects\home health policy\cka_hh at EOL\data";
libname proj_ref 'D:\NHATS\Projects\home health policy\cka_hh at EOL';

/*



H="Generic template"
/*

Created by: 
Date Created:

Updated by:
Date Updated:

Description: What is going on in this section of the code? 
i.e. defining variables, labeling variables. Creating new quartiles for income based off of something....



**************************************************
*/
local date = subinstr("$S_DATE"," ","_",.) 
local name @INSERTNAME_`date'
di "`name'"

capture log close 
clear all

set more off
version 12
set linesize 80


cd `datapath'
log using `name'.smcl, text replace


.
.
.
.
.
.
.
.




log close
translate `name'.smcl `name'.pdf
exit



H="get visits from rev center file"

proc contents data=sas.hha_revenue_center_j_13; run;


data rev_cntr;
set sas.hha_revenue_center_j_09-sas.hha_revenue_center_j_14 sas.hha_revenue_center_15-sas.hha_revenue_center_16 sas.hha_revenue_center_k_17;
run;

proc contents data=rev_cntr; run;

data rev_cntr; keep bene_id clm_id clm_thru_dt rev_cntr_dt rev_cntr hcpcs_cd rev_cntr_unit_cnt;
set rev_cntr;
run;

proc export data= rev_cntr outfile="D:\NHATS\Projects\home health policy\cka_hh at eol\data\rev_cntr.dta" dbms=stata replace; run; 


H="death date"
 use "D:\NHATS\Shared\base_data\NHATS cleaned\sp_round_1_8.dta"

 keep spid death_date
by spid, sort: gen pid= _n
keep if pid==1

 rename death_date index_date
 gen index_month=month(index_date)
gen index_year=year(index_date)

  save "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\death_date.dta", replace

H="making file of hh visits last year of life"
*GOAL IS TO END WITH A FILE OF HH VISITS WITHIN A YEAR OF DEATH- not for full cohort, just those who are alive

use "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\rev_cntr.dta" 


*DROP IF NOT MEANINGFUL CLAIM LINE
drop if rev_cntr== "0001" | rev_cntr== "0023" | rev_cntr== "0270" | rev_cntr== "0623"| hcpcs_cd== "G0457" | hcpcs_cd== "Q5001" | hcpcs_cd== "Q5002" | hcpcs_cd== "Q5009"
gen servicetype=.
*RN
replace servicetype=1 if hcpcs_cd== "G0154" | hcpcs_cd== "G0299" |  hcpcs_cd== "G0300" |  hcpcs_cd== "G0493" |  hcpcs_cd== "G0494" | hcpcs_cd== "G0495" | hcpcs_cd== "G0496" | hcpcs_cd== "G0162" | hcpcs_cd== "G0163" | hcpcs_cd== "G0164" 
*PT
replace servicetype=2 if hcpcs_cd== "G0151" | hcpcs_cd== "G0157" | hcpcs_cd== "G0159"
*ot
replace servicetype=3 if hcpcs_cd== "G0152" |  hcpcs_cd== "G0158" |  hcpcs_cd== "G0160"
*SLP
replace servicetype=4 if hcpcs_cd== "G0153" | hcpcs_cd== "G0161"
*CSW
replace servicetype=5 if hcpcs_cd== "G0155"
*HHA
replace servicetype=6 if hcpcs_cd== "G0156"

drop if servicetype==.

*merge to bene_id
merge m:1 bene_id using "D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Crosswalks\xwalk_2016.dta" , keepusing(spid)
keep if _merge==3
drop _merge
*merge to death date
merge m:1 spid using "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\death date.dta"

keep if _merge==3
drop if death_date==.


*make an indicator for a HH claim that is within a year of death
gen hh_dth_days= death_date-rev_cntr_dt
keep if hh_dth_days<365 & hh_dth_days>-90

*drop if duplicate claim lines per service per day for the same service type
by spid rev_cntr_dt servicetype, sort: gen sid=_n
keep if sid==1
drop sid

*now make a per-decedent summary measure with count of hh visits
sort spid rev_cntr_dt
gen nurse=1 if servicetype==1 
gen therapist=1 if servicetype==2 |servicetype==3 |servicetype==4 
gen sw=1 if servicetype==5 
gen hha=1 if servicetype==6 
by spid: egen nursevisits= total (nurse)
by spid: egen therapyvisits= total (therapist )
by spid: egen swvisits=total (sw)
by spid: egen hhavisits=total (hha)


*NOW LIMIT TO ONE OBSERVATION/PERSON
drop pid
sort spid rev_cntr_dt
by spid, sort: gen pid=_n
keep if pid==1

keep spid nursevisits therapyvisits swvisits hhavisits

 save "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\hh visits EOL.dta", replace

H="get index date"

/*nhats cleaned path*/

libname nhats 'D:\nhats\shared\base_data\nhats cleaned';

/*medicare xwalk and claims path*/
libname medi 'D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Merged\SAS';

/*project data paths*/
libname proj_int 'D:\nhats\projects\home health policy\cka_hh at EOL\data';
libname proj_fin "D:\nhats\projects\home health policy\cka_hh at EOL\data";
libname proj_ref 'D:\NHATS\Projects\home health policy\cka_hh at EOL';

/*



*************************************************
*/

proc import datafile="D:\nhats\shared\base_data\nhats cleaned\sp_round_1_8.dta" out=proj_int.nhats replace; run;


data index1;
set proj_int.nhats (keep=spid death_date death_month death_year);
index_date=death_date;
index_month=death_month;
index_year=death_year;
run;


proc import out=xwalk
	    datafile = "D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Crosswalks\xwalk_2016.dta" replace; 
run;


proc sql;
create table index as select a.*, b.bene_id
from index1 a left join
xwalk b 
on a.spid=b.spid;
quit;

proc sort data=index out=proj_int.index nodupkey;
by spid bene_id index_year;
run;


H="get continuous ffs before index"
**************************************************


/*sort claims denominator file*/

proc sort data=medi.mbsf_06_17 out=mbsf  nodupkey;
by bene_id year;
run;

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year;
run;

/*get mbsf just for interview year*/

proc sql; 
create table mbsf_index_year as select
a.*,b.buyin12,b.year,b.hmoind12
from index1 a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id)) 
and a.index_year=b.year;
quit;


proc sql;
select count(distinct bene_id) from mbsf_index_year;
quit;



data mbsf_index_year2;
set mbsf_index_year;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_iy=substr(trim(left(buyin12)),1,index_month);
hmo_iy=substr(trim(left(HMOIND12)),1,index_month);
end;
else do;
buyin_iy=trim(left(buyin12));
hmo_iy=trim(left(HMOIND12));
end;
format index_date date9.;
run;
proc means n;
var index_month;
run;

proc sql;
create table mbsf_index_year_bef as select
a.bene_id,a.year as index_year,
b.year as index_year_bef,
b.year, b.buyin12,b.HMOIND12
from mbsf_index_year a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.year-b.year<=1 order by bene_id,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table mbsf_index_year_2bef as select
a.bene_id,a.bene_id,a.index_year,a.index_year_bef,
b.year as index_year_2bef,
b.year,b.buyin12,b.HMOIND12
from mbsf_index_year_bef a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.index_year_bef-b.year<=1 order by bene_id,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
mbsf_index_year2 a
left join
mbsf_index_year_bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sql;
create table all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
all_insurance a
left join
mbsf_index_year_2bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year; 
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data all_insurance3;
set all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_iy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_iy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r)-1;
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r)-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;


data proj_int.ffs_before;
set all_insurance3;
run;


H="putting dataset together"
 use "D:\NHATS\Shared\base_data\NHATS cleaned\sp_round_1_8.dta"
 merge m:1 spid using "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\hh visits EOL.dta"
 
 
 *define cohort as those who die
 gen keep=0
 
 gen ivwdeathdays= death_date-ivw_date
 sort spid wave
 by spid: egen closedth=min(ivwdeathdays) if ivwdeathdays>0
 replace keep
  
 replace keep=1 if closedth==ivwdeathdays & closedth!=.
 
 *merge in ffs before
 drop _merge 
 merge m:1 spid using  "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\ffs_before.dta", keepusing (cont_ffs_n_mos)
 recode cont_ffs_n_mos (0/11=0)(12/36=1), gen(ffseol)
 
 *drop if in MA in last 12 months
 replace keep=0 if ffseol==0

H="variable cleaning"
*VARIABLE CLEANING

*count of any visits (binary) by category
egen totalvisits=rowtotal(nursevisits therapyvisits swvisits hhavisits)
recode totalvisits (0=0)(1/716=1), gen(anyvisits)
recode nursevisits (0=0)(1/716=1), gen(anynurse)
replace anynurse=0 if anyvisits==0
recode therapyvisits (0=0)(1/716=1), gen(anytherapy)
replace anytherapy=0 if anyvisits==0
recode swvisits (0=0)(1/716=1), gen(anysw)
replace anysw=0 if anyvisits==0
recode hhavisits (0=0)(1/716=1), gen(anyhha)
replace anyhha=0 if anyvisits==0

*how many visits
tab anyvisits if keep==1
tab anynurse if keep==1
tab anytherapy if keep==1
tab anysw if keep==1
tab anyhha if keep==1


*living in a NH on nhats ivw before death
gen nhstatus=0
replace nhstatus=1 if closedth==ivwdeathdays & closedth!=. & sp_status==3
replace keep=0 if nhstatus==1 

*keep variable for those receiving hh and hh types
gen keephh=keep
replace keephh=0 if anyvisits==0

gen keepnurse=keep
replace keepnurse=0 if anynurse==0 | anynurse==.

gen keeptherapy=keep
replace keeptherapy=0 if anytherapy==0 | anytherapy==.

gen keephha=keep
replace keephha=0 if anyhha==0 | anyhha==.

gen keepsw=keep
replace keepsw=0 if anysw==0 | anysw==.

*adls
recode adl_diff_index (0=0 "0")(1/2=1 "1=2")(3/7=2 "3+"), gen(adl_cat)

drop srhospice
*make hospice for nonmissing val of hospicelml
sort spid wave
by spid: egen srhospice= min(hospicelml)

H="analysis"
*analysis

svyset  varunit [pweight=anfinwgt], strat(varstrat)
svy, subpop(keep): tab anyvisits
svy, subpop(keephh): mean totalvisits

svy, subpop(keephh): tab anynurse
svy, subpop(keepnurse): mean nursevisits

svy, subpop(keephh): tab anytherapy
svy, subpop(keeptherapy): mean therapyvisits

svy, subpop(keephh): tab anyhha
svy, subpop(keephha): mean hhavisits

svy, subpop(keephh): tab anysw
svy, subpop(keepsw): mean swvisits

foreach var of varlist  female   educ_hs_ind livealone metro_ind medicaid  srhospice    sr_lung_dis_ever sr_heart_dis_ever sr_phq2_depressed sr_gad2_anxiety prob_dem {
svy, subpop(keephh): logistic anyhha `var'
}

foreach var of varlist agecat  race_cat income_cat homebound_cat adl_cat {
svy, subpop(keephh): logistic anyhha i.`var'
}

H="Change log"


********************Change Log******************** 



Updates:



12/17/2018 MH
------------
A formal template in Notetab was created with different headings. 

12/13/2018 MH
-------------
Change log conception was first introduced.


*/