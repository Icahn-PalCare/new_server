= V4 Outline MultiLine NoSorting TabWidth=30

H="First Heading"
/* 
********************HEADING******************** 

Project Name: Home health use at the end of life	

Date Started: Feb 1 2020

Primary Investigator: Claire Ankuda
Funding Source: NPCRC

Created by: Claire Ankuda

Primary Analyst: cka
Secondary Analyst:

Datasets Used: Beeson

Simple Outline:


*/
 
//STATA
// Global Macros use $ symbol to be called. 

//Intermediate Data Path
global intpath "E:\nhats\data\Projects\..."

// Final Data Path
global datapath "E:\nhats\data\Projects\..."

//Log files path
global logpath "E:\nhats\data\Projects\..."


global int "D:\NHATS\Projects\home health policy\cka_hh at eol\data\"
global final "D:\NHATS\Projects\home health policy\cka_hh at eol\data\"
global output "D:\NHATS\Projects\home health policy\cka_hh at eol\output\"
global logs "D:\NHATS\Projects\home health policy\cka_hh at eol\output\"




//SAS 
/*SAS */


/*nhats cleaned path*/

libname nhats 'D:\nhats\shared\base_data\nhats cleaned';

/*medicare xwalk and claims path*/
libname medi 'D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Merged\SAS';

/*project data paths*/
libname proj_int 'D:\nhats\projects\home health policy\cka_hh at EOL\data';
libname proj_fin "D:\nhats\projects\home health policy\cka_hh at EOL\data";
libname proj_ref 'D:\NHATS\Projects\home health policy\cka_hh at EOL';

/*



H="Generic template"
/*

Created by: 
Date Created:

Updated by:
Date Updated:

Description: What is going on in this section of the code? 
i.e. defining variables, labeling variables. Creating new quartiles for income based off of something....



**************************************************
*/
local date = subinstr("$S_DATE"," ","_",.) 
local name @INSERTNAME_`date'
di "`name'"

capture log close 
clear all

set more off
version 12
set linesize 80


cd `datapath'
log using `name'.smcl, text replace


.
.
.
.
.
.
.
.




log close
translate `name'.smcl `name'.pdf
exit



H="get visits from rev center file"

proc contents data=sas.hha_revenue_center_j_13; run;


data rev_cntr;
set sas.hha_revenue_center_j_09-sas.hha_revenue_center_j_14 sas.hha_revenue_center_15-sas.hha_revenue_center_16 sas.hha_revenue_center_k_17;
run;

proc contents data=rev_cntr; run;

data rev_cntr; keep bene_id clm_id clm_thru_dt rev_cntr_dt rev_cntr hcpcs_cd rev_cntr_unit_cnt;
set rev_cntr;
run;

proc export data= rev_cntr outfile="D:\NHATS\Projects\home health policy\cka_hh at eol\data\rev_cntr.dta" dbms=stata replace; run; 


H="death date"
 use "D:\NHATS\Shared\base_data\NHATS cleaned\sp_round_1_8.dta"

 keep spid death_date
by spid, sort: gen pid= _n
keep if pid==1

 rename death_date index_date
 gen index_month=month(index_date)
gen index_year=year(index_date)

  save "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\death_date.dta", replace

H="making file of hh visits last year of life"
*GOAL IS TO END WITH A FILE OF HH VISITS WITHIN A YEAR OF DEATH- not for full cohort, just those who are alive

use "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\rev_cntr.dta" 


*DROP IF NOT MEANINGFUL CLAIM LINE
drop if rev_cntr== "0001" | rev_cntr== "0023" | rev_cntr== "0270" | rev_cntr== "0623"| hcpcs_cd== "G0457" | hcpcs_cd== "Q5001" | hcpcs_cd== "Q5002" | hcpcs_cd== "Q5009"
gen servicetype=.
*RN
replace servicetype=1 if hcpcs_cd== "G0154" | hcpcs_cd== "G0299" |  hcpcs_cd== "G0300" |  hcpcs_cd== "G0493" |  hcpcs_cd== "G0494" | hcpcs_cd== "G0495" | hcpcs_cd== "G0496" | hcpcs_cd== "G0162" | hcpcs_cd== "G0163" | hcpcs_cd== "G0164" 
*PT
replace servicetype=2 if hcpcs_cd== "G0151" | hcpcs_cd== "G0157" | hcpcs_cd== "G0159"
*ot
replace servicetype=3 if hcpcs_cd== "G0152" |  hcpcs_cd== "G0158" |  hcpcs_cd== "G0160"
*SLP
replace servicetype=4 if hcpcs_cd== "G0153" | hcpcs_cd== "G0161"
*CSW
replace servicetype=5 if hcpcs_cd== "G0155"
*HHA
replace servicetype=6 if hcpcs_cd== "G0156"

drop if servicetype==.

*merge to bene_id
merge m:1 bene_id using "D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Crosswalks\xwalk_2016.dta" , keepusing(spid)
keep if _merge==3
drop _merge
*merge to death date
merge m:1 spid using "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\death date.dta"

keep if _merge==3
drop if death_date==.


*make an indicator for a HH claim that is within a year of death
gen hh_dth_days= death_date-rev_cntr_dt
keep if hh_dth_days<365 & hh_dth_days>-90

*drop if duplicate claim lines per service per day for the same service type
by spid rev_cntr_dt servicetype, sort: gen sid=_n
keep if sid==1
drop sid

*now make a per-decedent summary measure with count of hh visits
sort spid rev_cntr_dt
gen nurse=1 if servicetype==1 
gen therapist=1 if servicetype==2 |servicetype==3 |servicetype==4 
gen sw=1 if servicetype==5 
gen hha=1 if servicetype==6 
by spid: egen nursevisits= total (nurse)
by spid: egen therapyvisits= total (therapist )
by spid: egen swvisits=total (sw)
by spid: egen hhavisits=total (hha)


*NOW LIMIT TO ONE OBSERVATION/PERSON
drop pid
sort spid rev_cntr_dt
by spid, sort: gen pid=_n
keep if pid==1

keep spid nursevisits therapyvisits swvisits hhavisits

 save "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\hh visits EOL.dta", replace

H="get index date"

/*nhats cleaned path*/

libname nhats 'D:\nhats\shared\base_data\nhats cleaned';

/*medicare xwalk and claims path*/
libname medi 'D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Merged\SAS';

/*project data paths*/
libname proj_int 'D:\nhats\projects\home health policy\cka_hh at EOL\data';
libname proj_fin "D:\nhats\projects\home health policy\cka_hh at EOL\data";
libname proj_ref 'D:\NHATS\Projects\home health policy\cka_hh at EOL';

/*



*************************************************
*/

proc import datafile="D:\nhats\shared\base_data\nhats cleaned\sp_round_1_8.dta" out=proj_int.nhats replace; run;


data index1;
set proj_int.nhats (keep=spid death_date death_month death_year);
index_date=death_date;
index_month=death_month;
index_year=death_year;
run;


proc import out=xwalk
	    datafile = "D:\NHATS\Shared\raw\CMS\NHATS CMS DUA 28016\Crosswalks\xwalk_2016.dta" replace; 
run;


proc sql;
create table index as select a.*, b.bene_id
from index1 a left join
xwalk b 
on a.spid=b.spid;
quit;

proc sort data=index out=proj_int.index nodupkey;
by spid bene_id index_year;
run;


H="get continuous ffs before index"
**************************************************


/*sort claims denominator file*/

proc sort data=medi.mbsf_06_17 out=mbsf  nodupkey;
by bene_id year;
run;

proc sort data=proj_int.index out=index1 nodupkey;
by bene_id index_year;
run;

/*get mbsf just for interview year*/

proc sql; 
create table mbsf_index_year as select
a.*,b.buyin12,b.year,b.hmoind12
from index1 a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id)) 
and a.index_year=b.year;
quit;


proc sql;
select count(distinct bene_id) from mbsf_index_year;
quit;



data mbsf_index_year2;
set mbsf_index_year;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_iy=substr(trim(left(buyin12)),1,index_month);
hmo_iy=substr(trim(left(HMOIND12)),1,index_month);
end;
else do;
buyin_iy=trim(left(buyin12));
hmo_iy=trim(left(HMOIND12));
end;
format index_date date9.;
run;
proc means n;
var index_month;
run;

proc sql;
create table mbsf_index_year_bef as select
a.bene_id,a.year as index_year,
b.year as index_year_bef,
b.year, b.buyin12,b.HMOIND12
from mbsf_index_year a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.year-b.year<=1 order by bene_id,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table mbsf_index_year_2bef as select
a.bene_id,a.bene_id,a.index_year,a.index_year_bef,
b.year as index_year_2bef,
b.year,b.buyin12,b.HMOIND12
from mbsf_index_year_bef a inner join
mbsf b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<a.index_year_bef-b.year<=1 order by bene_id,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
mbsf_index_year2 a
left join
mbsf_index_year_bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year;
quit;

proc sql;
create table all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
all_insurance a
left join
mbsf_index_year_2bef b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.index_year=b.index_year; 
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data all_insurance3;
set all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_iy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_iy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r)-1;
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r)-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;


data proj_int.ffs_before;
set all_insurance3;
run;


H="putting dataset together"
 use "D:\NHATS\Shared\base_data\NHATS cleaned\sp_round_1_8.dta"
 merge m:1 spid using "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\hh visits EOL.dta"
 
 
 *define cohort as those who die
 gen keep=0
 
 gen ivwdeathdays= death_date-ivw_date
 sort spid wave
 by spid: egen closedth=min(ivwdeathdays) if ivwdeathdays>0
  
 replace keep=1 if closedth==ivwdeathdays & closedth!=.
 
 *tab keep=1 reveals 3,112 obs of people who died
 
 *merge in ffs before
 drop _merge 
 merge m:1 spid using  "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\ffs_before.dta", keepusing (cont_ffs_n_mos)
 recode cont_ffs_n_mos (0/11=0)(12/36=1), gen(ffseol)
 
 *drop if in MA in last 12 months
 replace keep=0 if ffseol==0
 *1,171 individuals lost because in MA in last month of life
 
 
 
 *merge with days at home in last year
 drop _merge
 merge m:1 spid using "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\total_home_days_last_year.dta" 
*exclude those who have no days at home
*==75
 replace keep=0 if home_days==0


H="variable cleaning"
*VARIABLE CLEANING

*count of any visits (binary) by category
egen totalvisits=rowtotal(nursevisits therapyvisits swvisits hhavisits)
recode totalvisits (0=0)(1/716=1), gen(anyvisits)
recode nursevisits (0=0)(1/716=1), gen(anynurse)
replace anynurse=0 if anyvisits==0
recode therapyvisits (0=0)(1/716=1), gen(anytherapy)
replace anytherapy=0 if anyvisits==0
recode swvisits (0=0)(1/716=1), gen(anysw)
replace anysw=0 if anyvisits==0
recode hhavisits (0=0)(1/716=1), gen(anyhha)
replace anyhha=0 if anyvisits==0

*how many visits
tab anyvisits if keep==1
tab anynurse if keep==1
tab anytherapy if keep==1
tab anysw if keep==1
tab anyhha if keep==1

*recode age
recode agecat (1/2=1 "65-74")(3/4=2 "75-84")(5/6=3 "85+"), gen(age3cat)

/*living in a NH on nhats ivw before death-- decided not to do this-- given they had some days at home in last year
gen nhstatus=0
replace nhstatus=1 if closedth==ivwdeathdays & closedth!=. & sp_status==3
replace keep=0 if nhstatus==1 
*/

*keep variable for those receiving hh and hh types
gen keephh=keep
replace keephh=0 if anyvisits==0

gen keepnurse=keep
replace keepnurse=0 if anynurse==0 | anynurse==.

gen keeptherapy=keep
replace keeptherapy=0 if anytherapy==0 | anytherapy==.

gen keephha=keep
replace keephha=0 if anyhha==0 | anyhha==.

gen keepsw=keep
replace keepsw=0 if anysw==0 | anysw==.


*make visits/100 days at home
gen totalvisits_perdah=totalvisits/(home_days/100)
gen nursevisits_perdah=nursevisits/(home_days/100)
gen therapyvisits_perdah=therapyvisits/(home_days/100)
gen swvisits_perdah=swvisits/(home_days/100)
gen hhavisits_perdah=hhavisits/(home_days/100)


*make visits/30 days at home
gen totalvisits_per30dah=30* (totalvisits/home_days)
gen nursevisits_per30dah=30*(nursevisits/home_days)
gen therapyvisits_per30dah=30*(therapyvisits/home_days)
gen swvisits_per30dah=30*(swvisits/home_days)
gen hhavisits_per30dah=30*(hhavisits/home_days)

*adls
recode adl_diff_index (0=0 "0")(1/2=1 "1=2")(3/7=2 "3+"), gen(adl_cat)


*make hospice for nonmissing val of hospicelml
sort spid wave
by spid: egen srhospice= min(hospicelml)

*****cleaning up for move off server
drop age total_caregiver_comp completed_nsoc eligible_nsoc nhats_death_month nhats_death_date nhats_death_day sr_othercancer_had sr_kidneycancer_had sr_coloncancer_had sr_crvovrnutrncancer_had sr_bladdercancer_had sr_prostatecancer_had sr_breastcancer_had sr_skincancer_had death_date



 save "D:\NHATS\Projects\MA and EOL care\cka_ MA vs TM EOL quality\data\final data\working file for move off server_ march 9 2020.dta", replace

H="final clean for pulling off"
use "D:\NHATS\Projects\MA and EOL care\cka_ MA vs TM EOL quality\data\final data\working file for move off server_ march 9 2020.dta", clear

drop ivw_date ivw_day ivw_month cont_ffs_n_mos ivwdeathdays closedth _m

replace hs_days=0 if hs_days==.
label var hs_days "Hospice days that would otherwise be 'at home'"
//allowed, but a very small number
drop hs_days

save "D:\NHATS\Projects\MA and EOL care\cka_ MA vs TM EOL quality\data\final data\working file for move off server_ march 11 2020.dta", replace

H="analysis"
*analysis

*Figure 1
svyset  varunit [pweight=anfinwgt], strat(varstrat)
svy, subpop(keep): tab anyvisits, ci
svy, subpop(keephh): mean totalvisits_per30dah

svy, subpop(keep): tab anynurse, ci
svy, subpop(keepnurse): mean nursevisits_per30dah

svy, subpop(keep): tab anytherapy, ci
svy, subpop(keeptherapy): mean therapyvisits_per30dah

svy, subpop(keep): tab anyhha, ci
svy, subpop(keephha): mean hhavisits_per30dah

svy, subpop(keep): tab anysw, ci
svy, subpop(keepsw): mean swvisits_per30dah


*table 1
tab anyvisits if keep==1


foreach var of varlist  female   educ_hs_ind  metro_ind medicaid livealone   sr_lung_dis_ever sr_heart_dis_ever sr_phq2_depressed sr_gad2_anxiety prob_dem srhospice {
svy, subpop(keep): tab  anyvisits `var', row
}

foreach var of varlist  age3cat  race_cat income_cat homebound_cat adl_cat  {
svy, subpop(keep): tab  anyvisits `var', row
}

svy, subpop(keep): mean home_days, over(anyvisits)
svy, subpop(keep): reg home_days anyvisits



H="**********Adding in days at home"


H="NHATS days at home"
/* NHATS Days at home code */

libname clean "D:\NHATS\Shared\base_data\CMS_claims\SAS\";
libname medi "D:\NHATS\Shared\base_data\CMS_claims\SAS";
libname proj_int "D:\NHATS\Projects\home health policy\cka_hh at EOL\data\int_data";

proc import out=death_date datafile="D:\NHATS\Shared\base_data\CMS_claims\Stata\death_date.dta" replace; 
run;

data index_d;
set death_date;
if death_date~=.;
index_date=death_date;
run;

proc sql;
create table index as select a.*, b.*
from index_d a inner join 
clean.xwalk_2016 b
on a.spid=b.spid;
quit;


proc sort data=index out=index1 nodupkey;
by bene_id index_date;
run;

data index_548 (keep= spid bene_id date index_date index_548 death_year ) ;
set index1;
index_548=index_date-548;
do i=index_548 to index_date;
date=i;
output;
end;
format date date9.;
format index_date date9.;
format index_548 date9.;
run;
run;

data index_365 (keep= spid bene_id date index_date index_365 death_year ) ;
set index1;
index_365=index_date-365;
do i=index_365 to index_date;
date=i;
output;
end;
format date date9.;
format index_date date9.;
format index_365 date9.;
run;
run;



/**************************************************************************/
/**************** Claims Before Death  ******************************/
/**************************************************************************/
/*macro to get claims 120 days before death
saves datasets for each claim type */
%macro claimspre(days_start=,days_bef_index=,source=,suf=, year=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.index_date,b.spid 
from medi.&source._&year. a inner join
index1 b
on a.bene_id=b.bene_id
and &days_start<=b.index_date-a.admit_date<=&days_bef_index ;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table &source._meet_2 as select a.*,b.index_date,b.spid 
from medi.&source._&year. a inner join
index1 b
on a.bene_id=b.bene_id
and b.index_date-a.admit_date>&days_bef_index and b.index_date-a.disch_date<=&days_bef_index;
quit;

data &source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
run;

%mend;

/*4m before death*/
%claimspre(days_start=0,days_bef_index=548,source=hh,suf=18m,year=09_17); /*home health*/
%claimspre(days_start=0,days_bef_index=548,source=ip,suf=18m,year=06_17); /*inpatient*/
%claimspre(days_start=0,days_bef_index=548,source=dm,suf=18m,year=09_17); /*dme*/
%claimspre(days_start=0,days_bef_index=548,source=op,suf=18m,year=09_17); /*outpatient*/
%claimspre(days_start=0,days_bef_index=548,source=pb,suf=18m,year=09_17); /*carrier*/
%claimspre(days_start=0,days_bef_index=548,source=snf,suf=18m,year=09_17); /*snf*/

/* Hospice file a little different format than the rest, but does the same as above */
/*
data hs_09_17 (keep= hspcstrt hs_start admit_date disch_date bene_id provider) ;
set medi.hs_09_17;
hs_start=input(put(hspcstrt, 8.), yymmdd8.);
format hs_start date9.;
format admit_date date9.;
run;
*/
/*claims fully within x time of death date*/
proc sql;
create table hs_meet_1 as select a.*,b.index_date,b.spid, b.bene_id 
from medi.hs_09_17 a inner join
index1 b
on a.bene_id=b.bene_id
and 0<=b.index_date-a.admit_date<=548;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table hs_meet_2 as select a.*,b.index_date,b.spid, b.bene_id
from medi.hs_09_17 a inner join
index1 b
on a.bene_id=b.bene_id
and b.index_date-a.admit_date>548 and b.index_date-a.disch_date<=548;
quit;

data hs_meet_18m(compress=yes);
set hs_meet_1 hs_meet_2;
run;



proc sql;
create table ip_meet_18m_rev as select a.*,b.* 
from ip_meet_18m a left join
clean.ip_rev_06_17 b
on a.bene_id=b.bene_id
and a.clm_id=b.clm_id;
quit;

proc sql;
create table op_meet_18m_rev as select a.*,b.* 
from op_meet_18m a left join
clean.op_rev_09_17 b
on a.bene_id=b.bene_id
and a.clm_id=b.clm_id;
quit;

/*emergency and observation stays identified from the inpatient and outpatient file. */

%macro er_obs(source=);

data &source._meet_18m_er_obs;
set &source._meet_18m_rev;
er_flag = 0;
obs_flag = 0;
array rev_cntr rev_cntr1-rev_cntr400;
do over rev_cntr;
if strip(rev_cntr) in:("0450", "0451", "0452", "0456", "0459", "0981") then er_flag = 1;
if strip(rev_cntr) in:("0762") then obs_flag =1;
/*if strip(rvcntr) in:("0760") and strip(hcpcs) in: ("G0378") and rvunt>=8 then obs_flag =1;*/
end;
run;

data &source._er_meet_18m;
set &source._meet_18m_er_obs;
if er_flag=1;
run;

data &source._obs_meet_18m;
set &source._meet_18m_er_obs;
if obs_flag=1;
run;

%mend;

/*4m before death*/
%er_obs(source=ip); /*inpatient file*/
%er_obs(source=op); /*outpatient file*/

/* Putting stays into 1 observation per day format. Flagging if they go to a different facility, but are still IP.*/

%macro dates(source=,suf=, npi=);

data &source._meet_&suf._d;
set &source._meet_&suf.;
format index_date date9.;
format admit_date date9.;
format disch_date date9.;
day_a=index_date-admit_date;
day_d=index_date-disch_date;
run;

data &source._meet_&suf._dates;
set &source._meet_&suf._d;
do i=admit_date to disch_date;
date=i;
output;
end;
format date date9.;
run;

data &source._&suf.; 
set &source._meet_&suf._dates;
where 0<=index_date-date<=548;
&source.=1;
&source._npi=&npi.;
run;

proc sort data=&source._&suf. out=&source._&suf. ;
by bene_id date ;
run;

data &source._dup (keep= bene_id bid_n hhidpn index_date flag date admit_date disch_date days_a days_d &source. fac_type provider &source._npi at_upin) ;
set &source._&suf.;
if date=lag(date) and bid_hrs_22=lag(bid_hrs_22) and (provider~=lag(provider) or &npi.~=lag(&npi.)) then flag=1;
run;

proc sort data=&source._dup nodupkey;
by bene_id date &source. &source._npi;
run;

%mend;

%dates(source=ip,suf=18m,npi=ORG_NPI_NUM);
%dates(source=op_er,suf=18m,npi=ORG_NPI_NUM);
%dates(source=op_obs,suf=18m,npi=ORG_NPI_NUM);
%dates(source=ip_er,suf=18m,npi=ORG_NPI_NUM);
%dates(source=ip_obs,suf=18m,npi=ORG_NPI_NUM);
%dates(source=snf,suf=18m,npi=ORG_NPI_NUM);
%dates(source=hh,suf=18m,npi=ORG_NPI_NUM);
%dates(source=hs,suf=18m,npi=ORG_NPI_NUM);



/* Bringing in MDS section*/

proc import out=proj_int.mds datafile="D:\NHATS\Projects\home health policy\cka_hh at EOL\data\int_data\mds.dta" replace; 
run;


/*MDS claims fully within x time of death date*/
proc sql;
create table mds_meet_1 as select a.*,b.index_date,b.spid 
from proj_int.mds a inner join
index1 b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and 0<=b.index_date-a.admit<=548 ;
quit;

/*MDS claims that start earlier than x time but span into x time before death*/
proc sql;
create table mds_meet_2 as select a.*,b.index_date,b.spid 
from proj_int.mds a inner join
index1 b
on trim(left(a.bene_id))=trim(left(b.bene_id))
and b.index_date-a.admit>548 and b.index_date-a.discharge<=0;
quit;

data mds_meet_18m (compress=yes);
set mds_meet_1 mds_meet_2;
run;


data mds_meet_18m_d;
set mds_meet_18m;
format index_date date9.;
day_a=index_date-admit;
day_d=index_date-discharge;
rename date=date_1;
run;


data mds_meet_18m_dates;
set mds_meet_18m_d;
do i=admit to discharge;
date=i;
output;
end;
format date date9.;
run;


data mds_18m; 
set mds_meet_18m_dates;
where 0<=index_date-date<=548;
mds=1;
run;

proc sort data=mds_18m out=mds_18m ;
by bene_id date ;
run;


data mds_dup (keep= bene_id target date admission discharge index_date day_a day_d date_1 mds) ;
set mds_18m;
run;


proc sort data=index_548;
by bene_id index_date;
run;

/* merging all files together*/

data all_claims;
merge index_548 ip_dup ip_er_dup ip_obs_dup op_er_dup op_obs_dup snf_dup hh_dup hs_dup mds_dup;
by bene_id date;
run;

/* keeping only 365 days before index(death) date). */
data all_claims;
set all_claims;
if index_date-date<=365 and index_date-date>=0 then days_365=1;
run;

data all_claims_365;
set all_claims;
where days_365=1;
run;

/* section to see hospice at home */


data pb_meet_18m_d;
set pb_meet_18m;
format index_date date9.;
format admit_date date9.;
format disch_date date9.;
day_a=index_date-admit_date;
day_d=index_date-disch_date;
run;

data pb_meet_18m_dates;
set pb_meet_18m_d;
do i=admit_date to disch_date;
date=i;
output;
end;
format date date9.;
run;

data pb_18m; 
set pb_meet_18m_dates;
where 0<=index_date-date<=548;
run;

proc sort data=pb_18m out=pb_18m ;
by bene_id date ;
run;

proc sql;
create table pb_hs_meet_548 as select a.*, b.*
from pb_18m a inner join
index_365 b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.date=b.date
inner join hs_18m c 
on trim(left(b.bene_id))=trim(left(c.bene_id)) and b.date=c.date;
quit;

data pb_hs_meet_365;
set pb_hs_meet_548;
where index_date-date<=365 and index_date-date>=0;
run;

data home_hospice;
set pb_hs_meet_365;
home_hs=0;
run;

data home_hospice1;
set home_hospice;
array place pos1-pos13;
do over place;
if place=12 then home_hs=1;
end;
run;

proc freq data=home_hospice1;
table home_hs;
run;

/* end hopsice at home */

proc sql;
create table all_claims_365_1 as select a.*, b.bene_id, b.home_hs, b.date
from all_claims_365 a left join
home_hospice1 b
on trim(left(a.bene_id))=trim(left(b.bene_id)) and a.date=b.date;
quit;

proc sort data=all_claims_365_1;
by bene_id date;
run;

data all_claims_365_2;
set all_claims_365_1;
not_home=0;
if ip=1 then not_home=1;
if ip_er=1 then not_home=1;
if ip_obs=1 then not_home=1;
if op_er=1 then not_home=1;
if op_obs=1 then not_home=1;
if snf=1 then not_home=1;
if mds=1 then not_home=1;
*if hs=1 and home_hs=0 then not_home=1;
*ebl--3/11/20--getting relevant count of hospice days;
if hs=1 and not_home=1 then hs=0;
if hs=1 then note_home=1;
home=0;
if not_home=0 then home=1;
if bene_id~="" ; 
run;

proc sort data=all_claims_365_2 nodupkey;
by bene_id date;
run;

proc sql;
create table total_home_days 
as select spid,
sum(home) as home_days,
sum(hs) as hs_days
from all_claims_365_2
group by spid;
quit;

proc freq data=total_home_days;
table home_days;
run;

proc export data=total_home_days outfile="D:\NHATS\Projects\home health policy\cka_hh at EOL\data\total_home_days_last_year.dta" replace; 
run;


H="xxxxxHRS days at home code"
/*

Created by: 
Date Created:

Updated by:
Date Updated:

Description: What is going on in this section of the code? 
i.e. defining variables, labeling variables. Creating new quartiles for income based off of something....



**************************************************
*/
/* Days at home code

/* Starting with death date as index and look 1 year back. */
/* Days at home code

/* Starting with death date as index and look 1 year back. */

data index;
set clean.death_date_2015;
index_date=death_all;
run; 

proc sort data=index out=index1 nodupkey;
by bid_hrs_22 id index_date;
run;

data index_548 (keep= id bid_hrs_22 date index_date index_548 death_year) ;
set index1;
index_548=index_date-548;
do i=index_548 to index_date;
date=i;
output;
end;
format date date9.;
format index_date date9.;
format index_548 date9.;
run;
run;

/**************************************************************************/
/**************** Claims Before Death  ******************************/
/**************************************************************************/
/*macro to get claims 548 days before death
saves datasets for each claim type */
%macro claimspre(days_start=,days_bef_index=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.index_date,b.id 
from medi.&source._1998_2015 a inner join
index1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22))
and &days_start<=b.index_date-a.admit_date<=&days_bef_index ;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table &source._meet_2 as select a.*,b.index_date,b.id 
from medi.&source._1998_2015 a inner join
index1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22))
and b.index_date-a.admit_date>&days_bef_index and b.index_date-a.disch_date<=&days_bef_index;
quit;

data &source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
run;

%mend;

/*18m before death*/
%claimspre(days_start=0,days_bef_index=548,source=hh,suf=18m); /*home health*/
%claimspre(days_start=0,days_bef_index=548,source=ip,suf=18m); /*inpatient*/
%claimspre(days_start=0,days_bef_index=548,source=dm,suf=18m); /*dme*/
%claimspre(days_start=0,days_bef_index=548,source=op,suf=18m); /*outpatient*/
%claimspre(days_start=0,days_bef_index=548,source=pb,suf=18m); /*carrier*/
%claimspre(days_start=0,days_bef_index=548,source=sn,suf=18m); /*snf*/

/* Hospice file a little different format than the rest, but does the same as above */

data hs_1998_2015 (keep= hspcstrt hs_start admit_date disch_date bid_hrs_22 provider) ;
set medi.hs_1998_2015;
hs_start=input(put(hspcstrt, 8.), yymmdd8.);
format hs_start date9.;
format admit_date date9.;
run;

/*claims fully within x time of death date*/
proc sql;
create table hs_meet_1 as select a.*,b.index_date,b.id 
from hs_1998_2015 a inner join
index1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22))
and 0<=b.index_date-a.hs_start<=548;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table hs_meet_2 as select a.*,b.index_date,b.id 
from hs_1998_2015 a inner join
index1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22))
and b.index_date-a.hs_start>548 and b.index_date-a.disch_date<=548;
quit;

data hs_meet_18m(compress=yes);
set hs_meet_1 hs_meet_2;
run;

/*emergency and observation stays identified from the inpatient and outpatient file. */

%macro er_obs(source=);

data &source._meet_18m_er_obs;
set &source._meet_18m;
er_flag = 0;
obs_flag = 0;
array rvcntr rvcntr01-rvcntr45;
array hcpcs hcpscd01-hcpscd45;
array rvunt rvunt01-rvunt45;
do over rvcntr;
do over hcpcs;
do over rvunt;
if strip(rvcntr) in:("0450", "0451", "0452", "0456", "0459", "0981") then er_flag = 1;
if strip(rvcntr) in:("0762") then obs_flag =1;
/*if strip(rvcntr) in:("0760") and strip(hcpcs) in: ("G0378") and rvunt>=8 then obs_flag =1;*/
end;
end;
end;
run;

data &source._er_meet_18m;
set &source._meet_18m_er_obs;
if er_flag=1;
run;

data &source._obs_meet_18m;
set &source._meet_18m_er_obs;
if obs_flag=1;
run;

%mend;

/*4m before death*/
%er_obs(source=ip); /*inpatient file*/
%er_obs(source=op); /*outpatient file*/


/* Putting stays into 1 observation per day format. Flagging if they go to a different facility, but are still IP.*/

%macro dates(source=,suf=, npi=);

data &source._meet_&suf._d;
set &source._meet_&suf.;
format index_date date9.;
format admit_date date9.;
format disch_date date9.;
day_a=index_date-admit_date;
day_d=index_date-disch_date;
run;

data &source._meet_&suf._dates;
set &source._meet_&suf._d;
do i=admit_date to disch_date;
date=i;
output;
end;
format date date9.;
run;

data &source._&suf.; 
set &source._meet_&suf._dates;
where 0<=index_date-date<=548;
&source.=1;
&source._npi=&npi.;
run;

proc sort data=&source._&suf. out=&source._&suf. ;
by bid_hrs_22 date ;
run;

data &source._dup (keep= bid_hrs_22 bid_n hhidpn index_date flag date admit_date disch_date days_a days_d &source. fac_type provider &source._npi at_upin) ;
set &source._&suf.;
if date=lag(date) and bid_hrs_22=lag(bid_hrs_22) and (provider~=lag(provider) or &npi.~=lag(&npi.)) then flag=1;
run;

proc sort data=&source._dup nodupkey;
by bid_hrs_22 date &source. &source._npi;
run;

%mend;

%dates(source=ip,suf=18m,npi=ORGNPINM);
%dates(source=op_er,suf=18m,npi=ORGNPINM);
%dates(source=op_obs,suf=18m,npi=ORGNPINM);
%dates(source=ip_er,suf=18m,npi=ORGNPINM);
%dates(source=ip_obs,suf=18m,npi=ORGNPINM);
%dates(source=sn,suf=18m,npi=ORGNPINM);
%dates(source=hh,suf=18m,npi=ORGNPINM);
%dates(source=hs,suf=18m,npi=ORGNPINM);


/* Bringing in MDS section*/

proc import out=proj_int.mds datafile="D:\HRS\Projects\dementia_decedents\ask_r01_financial_burden_dementia_7_yrs\data\int_data\mds.dta" replace; 
run;


/*MDS claims fully within x time of death date*/
proc sql;
create table mds_meet_1 as select a.*,b.index_date,b.id 
from proj_int.mds a inner join
index1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22))
and 0<=b.index_date-a.admit<=548 ;
quit;

/*MDS claims that start earlier than x time but span into x time before death*/
proc sql;
create table mds_meet_2 as select a.*,b.index_date,b.id 
from proj_int.mds a inner join
index1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22))
and b.index_date-a.admit>548 and b.index_date-a.discharge<=0;
quit;

data mds_meet_18m (compress=yes);
set mds_meet_1 mds_meet_2;
run;


data mds_meet_18m_d;
set mds_meet_18m;
format index_date date9.;
day_a=index_date-admit;
day_d=index_date-discharge;
rename date=date_1;
run;


data mds_meet_18m_dates;
set mds_meet_18m_d;
do i=admit to discharge;
date=i;
output;
end;
format date date9.;
run;


data mds_18m; 
set mds_meet_18m_dates;
where 0<=index_date-date<=548;
mds=1;
run;

proc sort data=mds_18m out=mds_18m ;
by bid_hrs_22 date ;
run;


data mds_dup (keep= bid_hrs_22 target date admission discharge index_date day_a day_d date_1 mds) ;
set mds_18m;
run;


proc sort data=index_548;
by bid_hrs_22 date;
run;

/* merging all files together*/

data all_claims;
merge index_548 ip_dup ip_er_dup ip_obs_dup op_er_dup op_obs_dup sn_dup hh_dup hs_dup mds_dup;
by bid_hrs_22 date;
run;

/* keeping only 365 days before index(death) date). */
data all_claims;
set all_claims;
if index_date-date<=365 and index_date-date>=0 then days_365=1;
run;

data all_claims_365;
set all_claims;
where days_365=1;
run;

/* section to see hospice at home */


data pb_meet_18m_d;
set pb_meet_18m;
format index_date date9.;
format admit_date date9.;
format disch_date date9.;
day_a=index_date-admit_date;
day_d=index_date-disch_date;
run;

data pb_meet_18m_dates;
set pb_meet_18m_d;
do i=admit_date to disch_date;
date=i;
output;
end;
format date date9.;
run;

data pb_18m; 
set pb_meet_18m_dates;
where 0<=index_date-date<=548;
run;

proc sort data=pb_18m out=pb_18m ;
by bid_hrs_22 date ;
run;

proc sql;
create table pb_hs_meet_548 as select a.*, b.*
from pb_18m a inner join
index_365 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22)) and a.date=b.date
inner join hs_18m c 
on trim(left(b.bid_hrs_22))=trim(left(c.bid_hrs_22))
and b.date=c.date;
quit;

data pb_hs_meet_365;
set pb_hs_meet_548;
where index_date-date<=365 and index_date-date>=0;
run;

data home_hospice;
set pb_hs_meet_365;
home_hs=0;
run;

data home_hospice1;
set home_hospice;
array place PLCRVC01-PLCRVC13;
do over place;
if place=12 then home_hs=1;
end;
run;

proc freq data=home_hospice1;
table home;
run;

/* end hopsice at home */

proc sql;
create table all_claims_365_1 as select a.*, b.bid_hrs_22, b.home_hs, b.date
from all_claims_365 a left join
home_hospice1 b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22)) and a.date=b.date;
quit;

proc sort data=all_claims_365_1;
by bid_hrs_22 date;
run;

data all_claims_365_2;
set all_claims_365_1;
not_home=0;
if ip=1 then not_home=1;
if ip_er=1 then not_home=1;
if ip_obs=1 then not_home=1;
if op_er=1 then not_home=1;
if op_obs=1 then not_home=1;
if sn=1 then not_home=1;
if mds=1 then not_home=1;
if hs=1 and home_hs=0 then not_home=1;
home=0;
if not_home=0 then home=1;
if bid_hrs_22~="" ; 
run;

proc sort data=all_claims_365_2 nodupkey;
by bid_hrs_22 date;
run;

proc sql;
create table total_home_days 
as select bid_hrs_22 ,
sum(home) as home
from all_claims_365_2
group by bid_hrs_22;
quit;

proc freq data=total_home_days;
table home;
run;

proc export data=total_home_days outfile="D:\HRS\Projects\exploratory\cka_days_at_home\data\final\total_home_days.dta" replace; 
run;


H="Change log"


********************Change Log******************** 



Updates:



3/11/2020 EBL
------------
Added "final clean for pulling off" header. First use of the change log!

12/17/2018 MH
------------
A formal template in Notetab was created with different headings. 

12/13/2018 MH
-------------
Change log conception was first introduced.


*/