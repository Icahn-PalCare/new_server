= V4 Outline MultiLine NoSorting TabWidth=30

H="Rand Family Data Processing"
Rand Family Data Processing 


starts with Rand family respondent-level and kid-respondent level datasets, last accessed 2/26/19.

Creates two long-format datasets:
	respondent level: "E:\data\hrs_public_2012\rand2012\family\working\family_r_all.dta" 
	kid-respondent level: "E:\data\hrs_public_2012\rand2012\family\working\family_k_all.dta" 

Cleans respondent-level dataset and selects variables to input into general HRS processing:
	final dataset: "E:\data\hrs_public_2012\rand2012\family\family_r_clean_98_10.dta"


notes: 

there is a 10% discrepancy between the number of co-resident children in the two variables that contain it, resdkn & lvnear

dataset includes moved in/out variables, which will likely be dropped because we can pull the original question from the hrs

possible extensions include pulling kid-specific data for resident children

Intersting note: In 2014 RAND removed all the kids-in-law(children's spouses) from the file, 
resulting in a lower number of kids then what was previously done. About ~4,200 kids-in-law were lost, but then new kids were 
added for 2014.

H="reshape long"
/*Reshape long format.  Keep only those in wave. Gen core_year variable
creates two datasets:
	respondent level: "E:\data\hrs_public_2014\rand2014\family\working\family_r_all.dta" 
	kid-respondent level: "E:\data\hrs_public_2014\rand2014\family\working\family_k_all.dta" 
*/

clear all
set more off 

local work D:\HRS\Shared\raw\HRS\hrs_public_2014\rand2014\family\working
use "D:\HRS\Shared\raw\HRS\hrs_public_2014\rand2014\family\StataSE\randhrsfamr1992_2014v1.dta", clear

forvalues i=12(-1)1 {
	foreach x in r s h {
		rename `x'`i'* `x'_*`i'
}
}


forvalues i=1/12 {
	preserve
	
	keep hhidpn hhid pn rlink *`i'
	rename *`i' *
	gen wave=`i'
	save "`work'\family_r_w_`i'", replace
	restore
}

use `work'\family_r_w_1, clear

forvalues i=2/12 {
	append using `work'\family_r_w_`i'
}

keep if inw==1

gen core_year=1992 if wave==1
replace core_year=1994 if wave==2
replace core_year=1996 if wave==3
replace core_year=1998 if wave==4
replace core_year=2000 if wave==5
replace core_year=2002 if wave==6
replace core_year=2004 if wave==7
replace core_year=2006 if wave==8
replace core_year=2008 if wave==9
replace core_year=2010 if wave==10
replace core_year=2012 if wave==11
replace core_year=2014 if wave==12


save `work'\family_r_all, replace

use "D:\HRS\Shared\raw\HRS\hrs_public_2014\rand2014\family\StataSE\randhrsfamk1992_2014v1.dta", clear

forvalues i=12(-1)1 {
	foreach x in k s kp h {
		rename `x'`i'* `x'_*`i'
}
}



forvalues i=1/12 {
	preserve
	
	keep hhidpn link kidid *`i'
	rename *`i' *
	gen wave=`i'
	save "`work'\family_k_w_`i'", replace
	restore
}

use `work'\family_k_w_1, clear

forvalues i=2/12 {
	append using `work'\family_k_w_`i'
}

keep if inw==1

gen core_year=1992 if wave==1
replace core_year=1994 if wave==2
replace core_year=1996 if wave==3
replace core_year=1998 if wave==4
replace core_year=2000 if wave==5
replace core_year=2002 if wave==6
replace core_year=2004 if wave==7
replace core_year=2006 if wave==8
replace core_year=2008 if wave==9
replace core_year=2010 if wave==10
replace core_year=2012 if wave==11
replace core_year=2014 if wave==12


save `work'\family_k_all, replace




H="select, clean, create variables"
/*drop observations that are out of scope or have bad linkage; clean and create new variables.
note-as of now, only done for respondent-level database
final database is "E:\data\hrs_public_2014\rand2014\family\family_r_clean_98_10.dta"*/


set more off 

local work D:\HRS\Shared\raw\HRS\hrs_public_2014\rand2014\family\working
cd `work'

use family_k_all, clear

//9/12/19--generate living kid
gen lv=!inlist(k_stat,4,7)
by hhidpn core_year, sort: egen ind_living_kid=max(lv)
label var ind_living_kid "Any living children"
preserve
keep hhidpn core_year ind_living_kid
duplicates drop
drop if missing(hhidpn)
tempfile tk
save `tk'
restore
gen inccat=1 if k_inca<10000 |k_incbh<10000
replace inccat=2 if inrange(k_inca,10000,35000) | inrange(k_incbh,10000,35000)
replace inccat=3 if inrange(k_inca,35000.01,70000) |  inrange(k_incbh,35000.01,70000)
replace inccat=4 if (k_inca>70000 & !missing(k_inca)) | (k_incbh>70000 & !missing(k_incbh))
/*replace inccat=1 if core_year==1996 & k_incb==7
replace inccat=2 if core_year==1996 & inlist(k_incb,6,8)
replace inccat=3 if core_year==1996 & inlist(k_incb,4,5)
replace inccat=4 if core_year==1996 & inrange(k_incb,1,3)*/
*replace inccat=k_incb if missing(inccat)
replace k_incb=. if core_year<1998

replace k_incb=inccat if !missing(inccat)
sort hhidpn kidid core_year
by hhidpn kidid: carryforward k_inc* k_educ*, replace
gsort hhidpn kidid -core_year
by hhidpn kidid: carryforward k_inc* k_educ*, replace

//keep only living children 18+ who are in scope
drop if core_year<1998
drop if k_agebg<18 
drop if !k_alive | !link


replace k_incb=. if missing(k_incb)
tab k_incb,m

/*gen some of same variables as from respondent-level file, but only for adult kids
-co-resident adult kids, number any
-w/in 10 miles, any
transfers to and from, amount any
help adls, iadls, finances, chores, healthcare costs
moved in/out
*/

//any adult living kids
by hhidpn core_year, sort: gen kid_adult_ind=_N>=1
by hhidpn core_year: gen n_adult_kids=_N
label var kid_adult_ind "Any living adult children"
label var n_adult_kids "Number living adult children"

replace k_resd=1 if k_resd==2
by hhidpn core_year, sort: egen num_resd_adult_kids=total(k_resd)
gen resd_kid_adult_ind=num_resd_adult_kids>=1 if !missing(num_resd_adult_kids)
by hhidpn core_year: egen kid_adult_nearby_ind=max(k_lv10mi)
by hhidpn core_year: egen amt_transf_from_kid_adult=total(k_tcamt)
by hhidpn core_year: egen transf_from_kid_adult_ind=max(k_tcany)
by hhidpn core_year: egen help_adls_kid_adult=max(k_hlpadl)
by hhidpn core_year: egen help_iadls_kid_adult=max(k_hlpiadl)
by hhidpn core_year: egen kid_adult_hlphrs=total(k_hlphrs)
by hhidpn core_year: egen ksp_hlphrs=total(kp_hlphrs)
egen kid_adult_sp_hlphrs=rowtotal(kid_adult_hlphrs ksp_hlphrs)

by hhidpn core_year: egen kid_adult_income_max=max(k_incb)
by hhidpn core_year: egen kid_adult_income_min=min(k_incb)
by hhidpn core_year: egen kid_adult_educ_max=max(k_educ)
by hhidpn core_year: egen kid_adult_educ_min=min(k_educ)
tab k_work, gen(wk)
by hhidpn core_year: egen kid_adult_wk_full_ind=max(wk3)
by hhidpn core_year: egen kid_adult_wk_part_ind=max(wk2)
by hhidpn core_year: egen kid_adult_wk_no_ind=max(wk1)

label define kid_adult_income 1 "<10K" 2 "10-35K" 3 "35-70K" 4 "35K+" 5 "70K+"
label values kid_adult_income_min kid_adult_income
label values kid_adult_income_max kid_adult_income

label var kid_adult_income_max "Top income among adult children"
label var kid_adult_income_min "Bottom income among adult children"
label var kid_adult_educ_max "Top education among adult children"
label var kid_adult_educ_min "Bottom education among adult children"
label var kid_adult_wk_full "Any adult kids working full time"
label var kid_adult_wk_part "Any adult kids working part time"
label var kid_adult_wk_no "Any adult kids not working"
label var resd_kid_adult "Lives with an adult child"
label var num_resd_adult_kids "Number co-resident adult children"
label var amt_transf "Total transfers from adult children"
label var kid_adult_nearby "Any adult child w/in 10 miles"
label var help_adls "Any help with ADLs from adult children"
label var help_iadls "Any help with IADLs from adult children"
label var kid_adult_hlphrs "Total hours of help from adult children"
label var ksp_hlphrs "Total hours of help from spouses of adult children"
label var kid_adult_sp_hlphrs "Total hours of help from adult children & spouses"
label var transf_from_kid "Any transfers from adult children"

gen step_son1=.
replace step_son1=0 if ((k_rel==1 & inlist(k_gender,1,2)) | (k_rel==2 & k_gender==2)) 
replace step_son1=1 if k_rel==2 & k_gender==1

gen step_dau1=.
replace step_dau1=0 if ((k_rel==1 & inlist(k_gender,1,2)) | (k_rel==2 & k_gender==1)) 
replace step_dau1=1 if k_rel==2 & k_gender==2

bys hhidpn core_year: egen step_son_count=total(step_son1), m
bys hhidpn core_year: egen step_dau_count=total(step_dau1), m

label var step_son_count "Step-son count in core year"
label var step_dau_count "Step-daughter in core year"

bys hhidpn core_year: egen hasownkid=max(cond(k_rel==1),1,0)
bys hhidpn core_year: egen hasstepkid=max(cond(k_rel==2),1,0)
bys hhidpn core_year: egen hasanykid=max(cond(inlist(k_rel,1,2,6,7)),1,0)

label var hasownkid "Has Living Biological child"
label var hasstepkid "Has Living Step-Child"
label var hasanykid "Has Living Child (incl. Biological, Step, in-law)"

keep hhidpn *kid* ksp_hlphrs core_year step_son_count step_dau_count has*kid
drop k_*  kidid kp_* 

local adultvars num_resd_adult_kids resd_kid_adult_ind kid_adult_nearby_ind ///
amt_transf_from_kid_adult transf_from_kid_adult_ind help_adls_kid_adult ///
help_iadls_kid_adult kid_adult_hlphrs ksp_hlphrs kid_adult_sp_hlphrs ///
kid_adult_income_max kid_adult_income_min kid_adult_educ_max kid_adult_educ_min ///
kid_adult_wk_full_ind kid_adult_wk_part_ind kid_adult_wk_no_ind kid_adult_ind ///
n_adult_kids

duplicates drop
tempfile t1
save `t1'



use family_r_all, clear


//drop observations that are out of scope or have a cross-wave linkage problem
//update 11/3/2016-no longer dropping for linkage issue
drop if /*rlink==0 |*/ core_year<1998
gen inscope=1

//keep select variables
local keepvars h_child h_lvnear h_resdkn r_hlpadlkn r_hlpiadlkn ///
r_hlpfinkn r_hlpchrkn r_hlpfutkn r_hlpfutgn r_hltcstkn h_kdcarekn h_tcany ///
h_tcntran h_tcamt h_fcany h_fcntran h_fcamt r_kdcarehr h_lv10mikn h_nson h_ndau r_stepkidkn r_livbro r_livsis
keep hhidpn hhid pn core_year rlink inscope s_hhidpn `keepvars' 

foreach x of local keepvars {
	replace `x'=. if inlist(`x',.c,.d,.d,.e,.f,.h,.k,.m,.r,.s)
	tab `x',m
}

//number of kids; any kids indicator
gen num_living_kids=h_child
gen living_kids_ind=h_child>0 if h_child!=.

label var num_living_kids "Number living, in-contact children"
label var living_kids_ind "Any living, in-contact children"

gen num_sons=h_nson
gen liv_sons=h_nson>0 if  h_nson!=.

label var num_sons "Number living, sons"
label var liv_sons "Any Living, in-contact sons"

gen num_dau=h_ndau
gen liv_dau=h_ndau>0 if  h_ndau!=.

label var num_dau "Number living, daughters"
label var liv_dau "Any Living, in-contact daughters"

gen num_step_kids=r_stepkidkn
gen liv_step_kids=r_stepkidkn>0 if r_stepkidkn!=.

label var num_step_kids "Number living, step-children"
label var liv_step_kids "Any Living, in-contact step-children"

//number of brothers and sisters

gen num_bro=r_livbro
gen liv_bro=r_livbro>0 if r_livbro!=.

gen num_sis=r_livsis
gen liv_sis=r_livsis>0 if r_livsis!=.


label var num_bro "Number living, brothers"
label var liv_bro "Any Living, brothers" 

label var num_sis "Number living, sisters"
label var liv_sis "Any Living, sisters" 

//number co-resident children; live with kids indicator
//also have h_livnear, which has ~10% disagreement on co-residents
gen num_resd_kids=h_resdkn
gen resd_kid_ind=h_resdkn>0 if h_resdkn!=.
gen kid_nearby_ind=h_lv10mikn>0 if !missing(h_lv10mikn)
replace kid_nearby_ind=0 if living_kids_ind==0
label var num_resd_kids "Number co-resident children"
label var resd_kid_ind "Lives with at least one child"
label var kid_nearby_ind "Kids living w/in 10 miles"
//transfers, amount and ind, to and from children
gen transf_to_kid_ind=h_tcany==1 if h_tcany!=.
gen amt_transf_to_kid=h_tcamt
gen transf_from_kid_ind=h_fcany==1 if h_fcany!=.
gen amt_transf_from_kid=h_fcamt

label var transf_to_kid_ind "Any transfers to children, $500+"
label var amt_transf_to_kid "Amount transfers to children, any amt"
label var transf_from_kid_ind "Any transfers from children, $500+"
label var amt_transf_from_kid "Amount transfers from children, any amt"

//help variables, adl, iadl, finances, chores & errands, healthcare, ///
//future kids & grandkids
gen help_adls_kids_ind=r_hlpadlkn>0 if r_hlpadlkn!=.
gen help_iadls_kids_ind=r_hlpiadlkn>0 if r_hlpiadlkn!=.
gen help_fin_kids_ind=r_hlpfinkn>0 if r_hlpfinkn!=.
gen help_chores_kids_ind=r_hlpchrkn>0 if r_hlpchrkn!=.
gen help_hcosts_kids_ind=r_hltcstkn>0 if r_hltcstkn!=.
gen help_future_kids_ind=r_hlpfutkn>0 if r_hlpfutkn!=.
gen help_future_gkids_ind=r_hlpfutgn>0 if r_hlpfutgn!=.

label var help_adls "Children help with ADLs"
label var help_iadls "Children help with IADLs"
label var help_fin "Children help with Finances"
label var help_chores "Children help with chores or errands"
label var help_hcosts "Children help w/ HC costs"
label var help_future_k "Children will help in future"
label var help_future_gk "Grandkids will help in future"

//kids receive 100+ hrs help from r and/or s with child care & r child care amt
gen child_care_ind=r_kdcarehr>0 if r_kdcarehr!=.
gen amt_child_care=r_kdcarehr
label var child_care_ind "Children use R for child care"
label var amt_child_care "Number hrs child care provided by R"
drop `keepvars'

local newvars num_living_kids living_kids_ind num_resd_kids resd_kid_ind ///
transf_to_kid_ind amt_transf_to_kid transf_from_kid_ind amt_transf_from_kid ///
help_adls_kids_ind help_iadls_kids_ind help_fin_kids_ind help_chores_kids_ind ///
help_hcosts_kids_ind help_future_kids_ind help_future_gkids_ind child_care_ind ///
amt_child_care kid_nearby_ind num_sons liv_sons num_dau liv_dau num_step_kids ///
liv_step_kids num_bro num_sis liv_bro liv_sis


reshape wide inscope s_hhidpn `newvars', i(hhidpn) j(core_year)


forvalues i= 2000(2)2014 {
	gen moved_in`i'=resd_kid_ind`=`i'-2'==0 & resd_kid_ind`i'==1 
	replace moved_in`i'=. if resd_kid_ind`=`i'-2'==. | resd_kid_ind`i'==. ///
	| resd_kid_ind`=`i'-2'==1
	gen moved_out`i'=resd_kid_ind`=`i'-2'==1 & resd_kid_ind`i'==0
	replace moved_out`i'=. if resd_kid_ind`=`i'-2'==. | resd_kid_ind`i'==. ///
	| resd_kid_ind`=`i'-2'==0
}

reshape long inscope `newvars' moved_out moved_in s_hhidpn, i(hhidpn) j(core_year)
keep if inscope==1

label var moved_in "Now lives with child; moved in since last ivw"
label var moved_out "No longer lives with child; moved out"

//8/23/17--add in the variables for adult kids
merge 1:1 hhidpn core_year using `t1'
merge 1:1 hhidpn core_year using `tk', nogen


foreach x of local adultvars {
	replace `x'=0 if _m==1
}
gen id=hhid+pn
*drop _m rlink hhid pn
drop if missing(id)
save "D:\HRS\Shared\base_data\hrs_cleaned\family_r_clean_98_14.dta", replace


H="descriptive statistics"
//look at crosstabs, etc.


set more off 

cd "D:\HRS\Shared\base_data\hrs_cleaned"

use family_r_clean_98_14, clear

local cfamvars num_living_kids num_resd_kids amt_transf_to_kid amt_transf_from

local famvars num_living_kids living_kids_ind num_resd_kids resd_kid_ind ///
moved_in moved_out transf_to_kid_ind amt_transf_to_kid transf_from_kid_ind ///
amt_transf_from_kid help_adls_kids_ind help_iadls_kids_ind help_fin_kids_ind ///
help_hcosts_kids_ind help_future_kids_ind help_future_gkids_ind child_care_ind ///
num_sons liv_sons num_dau liv_dau num_step_kids liv_step_kids step_son step_dau

local rn : word count `famvars' n

mat fam=J(`rn',4,.)
local r=1
local c=1

foreach x of local famvars {
	sum `x' 
	if inlist("`x'","num_living_kids", "num_resd_kids", "amt_transf_to_kid", ///
	"amt_transf_from_kid") {
		mat fam[`r',1]=r(mean)
		mat fam[`r',2]=r(sd)
}
	else {
		mat fam[`r',1]=r(mean)*100
		mat fam[`r',2]=r(mean)*r(N)
}	
	sum core_year if `x'==.
	mat fam[`r',3]=r(N)
	mat fam[`r',4]=(r(N)/_N)*100
	local r=`r'+1
}

sum core_year
mat fam[`r',2]=r(N)
mat fam[`r',3]=_N-r(N)


mat rownames fam=`famvars' Total

frmttable, statmat(fam) varlabels ctitles("" "Mean/%" "sd/N" "N missing" ///
"% missing") title("Respondent-level kid variables, Rand") ///
note("Data from Rand respondent-level family file with good cross-wave linkage, 1998-2010") ///
sdec(2,0,0,2)



H="change log"


********************Change Log******************** 



Updates:


2/26/19-EBL-added number of adult kids and indicator for any adult kids


06/27/2019 MH
---------- 
Adding in step-kids count. 

05/31/2019 MH
----------
Made file path changes and re-ran code to create datasets for new server. 


2/26/19-EBL-added change log and added spouse id to final dataset